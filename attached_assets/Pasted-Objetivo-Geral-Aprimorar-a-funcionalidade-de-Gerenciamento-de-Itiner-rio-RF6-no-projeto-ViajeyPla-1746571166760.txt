Objetivo Geral: Aprimorar a funcionalidade de Gerenciamento de Itinerário (RF6) no projeto ViajeyPlanner. Isso envolve permitir que o usuário selecione um itinerário existente para edição, carregue seus dados completos na visualização Kanban e garanta que novas atividades adicionadas sejam corretamente associadas e salvas no itinerário em edição através da API backend.
Contexto do Projeto:
Projeto: ViajeyPlanner (aplicação de planejamento de viagens)
Backend: Node.js com Express, API exposta em /api. O backend já possui rotas para CRUD de itinerários (/api/itineraries).
Frontend: HTML, CSS, JavaScript (sem framework específico, manipulação direta do DOM e Bootstrap para UI).
Página de visualização/edição Kanban: public/itinerary-kanban.html (script principal: static/js/itinerary-kanban.js).
Página inicial/dashboard (onde itinerários podem ser listados): public/desktop.html (script principal: static/js/desktop.js, ou static/js/app.js se for o geral).
Requisitos Detalhados para Implementação (divididos em partes):
Parte 1: Implementar Seleção de Itinerário para Edição
Local da Implementação: Idealmente na página que lista os itinerários do usuário (ex: public/desktop.html ou uma nova página dedicada como public/meus-roteiros.html). O script a ser modificado/criado seria o associado a esta página (ex: static/js/desktop.js ou um novo static/js/meus-roteiros.js).
Listar Itinerários do Usuário:
Ao carregar a página de listagem de itinerários, o script deve fazer uma requisição GET assíncrona para a API /api/itineraries para buscar os itinerários do usuário logado. (Observação: Assumir que a API /api/itineraries retorna apenas os itinerários do usuário autenticado, ou que um parâmetro como ?userId=CURRENT_USER_ID pode ser usado se a API suportar e o ID do usuário estiver disponível no frontend).
Para cada itinerário retornado, exiba suas informações principais (ex: título, destino, datas) de forma clara.
Adicionar Botão/Link "Editar":
Para cada itinerário listado, adicione um botão ou link com o texto "Editar" (ou um ícone de edição).
Ao clicar neste botão/link "Editar", o usuário deve ser redirecionado para a página do Kanban de edição: public/itinerary-kanban.html.
Importante: O redirecionamento deve incluir o ID do itinerário selecionado como um parâmetro na URL. Por exemplo: itinerary-kanban.html?roteiroId=[ID_DO_ITINERARIO_SELECIONADO].
Parte 2: Carregar e Exibir o Itinerário Selecionado no Kanban (Ajustes em static/js/itinerary-kanban.js)
Arquivo a ser modificado: static/js/itinerary-kanban.js
Página HTML relacionada: public/itinerary-kanban.html
Detectar ID do Itinerário na URL:
Ao carregar a página itinerary-kanban.html, o script deve verificar se existe um parâmetro roteiroId na URL. Se não houver, pode redirecionar para a página de seleção de itinerários ou exibir uma mensagem indicando que nenhum itinerário foi selecionado.
Buscar Dados Completos do Itinerário da API:
Se o roteiroId estiver presente, o script deve fazer uma requisição GET assíncrona para o endpoint da API: /api/itineraries/:id (substituindo :id pelo roteiroId da URL).
Utilize fetch para a requisição. Inclua tratamento de erro (ex: try...catch, .then().catch()).
Atualizar o Estado da Aplicação (appState.currentItinerary):
Após receber os dados do itinerário da API com sucesso, atualize a variável appState.currentItinerary com os dados completos recebidos. A API (itineraryController.js) retorna um objeto que inclui o itinerário base e um array days, onde cada dia contém um array activities. A estrutura esperada é:
javascript
appState.currentItinerary = {
  id: 'string', title: 'string', destination: 'string', start_date: 'YYYY-MM-DD', end_date: 'YYYY-MM-DD', cover_image: 'string',
  days: [
    { id: 'string', day_number: number, date: 'YYYY-MM-DD', title: 'string',
      activities: [ { id: 'string', name: 'string', type: 'string', ...outrosCampos } ]
    }
  ]
};
Renderizar Dinamicamente o Itinerário no Kanban:
Com appState.currentItinerary populado, chame ou crie funções para renderizar:
O título, destino, e datas do itinerário nos elementos HTML apropriados da página.
As abas para cada dia do itinerário (ex: dentro de #days-tabs).
O conteúdo de cada aba de dia, incluindo as colunas do Kanban (Manhã, Tarde, Noite, Não Agendado) (ex: dentro de #days-content).
Para cada atividade em cada dia, use a função createActivityCard (ou adapte-a) para gerar o card HTML da atividade e inseri-lo na coluna e dia corretos.
A função loadFromLocalStorage() deve ser ajustada para priorizar este carregamento via API quando roteiroId estiver presente.
Parte 3: Garantir Associação Correta de Novas Atividades ao Itinerário em Edição (Ajustes em static/js/itinerary-kanban.js)
Arquivo a ser modificado: static/js/itinerary-kanban.js
Modificar a Função saveNewActivity() (ou similar):
Quando o usuário preencher o formulário para adicionar uma nova atividade e clicar em salvar:
Obtenha o id do itinerário que está atualmente em edição. Este ID deve estar armazenado em appState.currentItinerary.id (que foi carregado a partir do roteiroId da URL).
Validação: Se appState.currentItinerary.id não estiver disponível, exiba um erro, pois não é possível salvar uma atividade sem saber a qual itinerário ela pertence.
Construa o payload da nova atividade com todos os seus detalhes (nome, tipo, local, dia, período, horários, notas).
Requisição à API: Faça uma requisição POST assíncrona para a API do backend para criar esta nova atividade, associando-a ao itinerário e ao dia corretos.
Sugestão de Endpoint (verificar/adaptar no backend se necessário): Um endpoint como POST /api/itineraries/:itineraryId/days/:dayNumber/activities ou POST /api/activities onde o payload inclui itinerary_id e day_id (ou day_number). O itineraryController.js já lida com a criação de dias quando um itinerário é criado. A criação de atividades dentro desses dias precisa ser mapeada para uma rota e lógica de controller específica se ainda não existir de forma granular. O prompt deve instruir o Agent a assumir que o frontend precisa enviar o itinerary_id e o day_number (ou day_id se disponível) junto com os dados da atividade.
O payload da requisição para a API deve incluir, além dos dados da atividade, o itinerary_id e o identificador do dia (day_number ou day_id).
Feedback ao Usuário: Após a resposta da API (sucesso ou erro), forneça feedback visual ao usuário.
Atualização da UI: Se a atividade for salva com sucesso no backend, atualize a UI (o quadro Kanban) adicionando o novo card da atividade. A API de criação de atividade deve retornar os dados da atividade criada (incluindo seu novo ID gerado pelo backend) para que o frontend possa usá-los.
Considerações Adicionais para o Replit Agent:
Tratamento de Erros: Implemente tratamento robusto para erros de rede, respostas inesperadas da API, e casos onde dados necessários (como roteiroId) não estão presentes.
Experiência do Usuário: Pense em mensagens de carregamento enquanto os dados são buscados e feedback claro para o usuário sobre o sucesso ou falha das operações.
Modularidade: Incentive a criação de funções bem definidas para cada responsabilidade (buscar dados, renderizar UI, salvar dados).
Segurança (Frontend): Lembre-se que o frontend não deve lidar com lógica de autenticação sensível diretamente, mas deve interagir com endpoints de API que são protegidos no backend.
Resultado Esperado Após Implementação:
O usuário poderá ver uma lista de seus itinerários e escolher um para editar.
Ao selecionar um itinerário, a página do Kanban (itinerary-kanban.html) será carregada com os dados completos (dias, atividades) desse itinerário específico, buscados da API.
Ao adicionar uma nova atividade através do formulário no Kanban, essa atividade será enviada para a API backend e salva corretamente, associada ao itinerário e dia que estão atualmente em edição.
A interface do Kanban será atualizada para refletir a nova atividade adicionada.
Por favor, Replit Agent, proceda com a análise e sugestão de modificações nos arquivos HTML e JavaScript indicados para implementar estas funcionalidades de forma incremental e robusta.