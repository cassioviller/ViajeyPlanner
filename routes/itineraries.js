// Itinerary routes
const express = require('express');
const router = express.Router();
const { Itinerary, Day, Activity, User, Share, Checklist, ChecklistItem, PointOfInterest } = require('../models');

// Get all itineraries for a user
router.get('/user/:userId', async (req, res) => {
  try {
    const itineraries = await Itinerary.findAll({
      where: { userId: req.params.userId },
      order: [['updatedAt', 'DESC']]
    });
    return res.status(200).json(itineraries);
  } catch (error) {
    console.error('Error fetching itineraries:', error);
    return res.status(500).json({ message: 'Error fetching itineraries', error: error.message });
  }
});

// Get shared itineraries for a user
router.get('/shared/:userId', async (req, res) => {
  try {
    const shares = await Share.findAll({
      where: { userId: req.params.userId },
      include: [
        { model: Itinerary, as: 'itinerary' }
      ]
    });
    
    const sharedItineraries = shares.map(share => {
      const itinerary = share.itinerary.toJSON();
      itinerary.permission = share.permission;
      return itinerary;
    });
    
    return res.status(200).json(sharedItineraries);
  } catch (error) {
    console.error('Error fetching shared itineraries:', error);
    return res.status(500).json({ message: 'Error fetching shared itineraries', error: error.message });
  }
});

// Get a specific itinerary with all details
router.get('/:id', async (req, res) => {
  try {
    const itinerary = await Itinerary.findByPk(req.params.id, {
      include: [
        { 
          model: User, 
          as: 'user',
          attributes: ['id', 'username', 'firstName', 'lastName', 'avatarUrl'] 
        },
        { 
          model: Day, 
          as: 'days',
          include: [
            { model: Activity, as: 'activities' }
          ],
          order: [['dayNumber', 'ASC'], ['activities', 'order', 'ASC']]
        },
        { 
          model: Checklist, 
          as: 'checklist',
          include: [
            { model: ChecklistItem, as: 'items', order: [['order', 'ASC']] }
          ]
        },
        { 
          model: PointOfInterest, 
          as: 'pointsOfInterest'
        }
      ]
    });
    
    if (!itinerary) {
      return res.status(404).json({ message: 'Itinerary not found' });
    }
    
    return res.status(200).json(itinerary);
  } catch (error) {
    console.error('Error fetching itinerary:', error);
    return res.status(500).json({ message: 'Error fetching itinerary', error: error.message });
  }
});

// Create a new itinerary
router.post('/', async (req, res) => {
  try {
    const { userId, title, destination, startDate, endDate, visibility, description, tags } = req.body;
    
    // Create the itinerary
    const newItinerary = await Itinerary.create({
      userId,
      title,
      destination,
      startDate,
      endDate,
      visibility,
      description,
      tags,
      status: 'planning'
    });
    
    // Create default day
    const defaultDay = await Day.create({
      itineraryId: newItinerary.id,
      dayNumber: 1,
      date: startDate || null
    });
    
    // Create default checklist
    const defaultChecklist = await Checklist.create({
      itineraryId: newItinerary.id,
      title: 'Travel Checklist'
    });
    
    // Create some default checklist items
    await ChecklistItem.bulkCreate([
      { checklistId: defaultChecklist.id, text: 'Passport/ID', order: 0, isAutoGenerated: true },
      { checklistId: defaultChecklist.id, text: 'Travel insurance', order: 1, isAutoGenerated: true },
      { checklistId: defaultChecklist.id, text: 'Phone charger', order: 2, isAutoGenerated: true },
      { checklistId: defaultChecklist.id, text: 'Confirm reservations', order: 3, isAutoGenerated: true }
    ]);
    
    // Return the created itinerary with the day and checklist
    const createdItinerary = await Itinerary.findByPk(newItinerary.id, {
      include: [
        { model: Day, as: 'days' },
        { 
          model: Checklist, 
          as: 'checklist',
          include: [{ model: ChecklistItem, as: 'items' }]
        }
      ]
    });
    
    return res.status(201).json(createdItinerary);
  } catch (error) {
    console.error('Error creating itinerary:', error);
    return res.status(500).json({ message: 'Error creating itinerary', error: error.message });
  }
});

// Update an itinerary
router.put('/:id', async (req, res) => {
  try {
    const { title, destination, startDate, endDate, visibility, description, tags, status } = req.body;
    
    // Find the itinerary
    const itinerary = await Itinerary.findByPk(req.params.id);
    
    if (!itinerary) {
      return res.status(404).json({ message: 'Itinerary not found' });
    }
    
    // Update the itinerary
    await itinerary.update({
      title,
      destination,
      startDate,
      endDate,
      visibility,
      description,
      tags,
      status
    });
    
    return res.status(200).json(itinerary);
  } catch (error) {
    console.error('Error updating itinerary:', error);
    return res.status(500).json({ message: 'Error updating itinerary', error: error.message });
  }
});

// Delete an itinerary
router.delete('/:id', async (req, res) => {
  try {
    const itinerary = await Itinerary.findByPk(req.params.id);
    
    if (!itinerary) {
      return res.status(404).json({ message: 'Itinerary not found' });
    }
    
    await itinerary.destroy();
    return res.status(200).json({ message: 'Itinerary deleted successfully' });
  } catch (error) {
    console.error('Error deleting itinerary:', error);
    return res.status(500).json({ message: 'Error deleting itinerary', error: error.message });
  }
});

// Add a day to an itinerary
router.post('/:id/days', async (req, res) => {
  try {
    const { dayNumber, date, notes } = req.body;
    
    // Check if the itinerary exists
    const itinerary = await Itinerary.findByPk(req.params.id);
    
    if (!itinerary) {
      return res.status(404).json({ message: 'Itinerary not found' });
    }
    
    // Check if the day number already exists
    const existingDay = await Day.findOne({
      where: {
        itineraryId: req.params.id,
        dayNumber
      }
    });
    
    if (existingDay) {
      return res.status(400).json({ message: 'A day with this number already exists' });
    }
    
    // Create the day
    const newDay = await Day.create({
      itineraryId: req.params.id,
      dayNumber,
      date,
      notes
    });
    
    return res.status(201).json(newDay);
  } catch (error) {
    console.error('Error adding day:', error);
    return res.status(500).json({ message: 'Error adding day', error: error.message });
  }
});

// Get public itineraries
router.get('/public', async (req, res) => {
  try {
    const publicItineraries = await Itinerary.findAll({
      where: { visibility: 'public' },
      include: [
        { 
          model: User, 
          as: 'user',
          attributes: ['id', 'username', 'firstName', 'lastName', 'avatarUrl'] 
        }
      ],
      order: [['updatedAt', 'DESC']],
      limit: 20
    });
    
    return res.status(200).json(publicItineraries);
  } catch (error) {
    console.error('Error fetching public itineraries:', error);
    return res.status(500).json({ message: 'Error fetching public itineraries', error: error.message });
  }
});

module.exports = router;