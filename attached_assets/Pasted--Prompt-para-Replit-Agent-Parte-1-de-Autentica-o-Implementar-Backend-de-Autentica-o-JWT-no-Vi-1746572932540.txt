## Prompt para Replit Agent (Parte 1 de Autenticação): Implementar Backend de Autenticação JWT no ViajeyPlanner

**Objetivo Principal:** Implementar a base do sistema de autenticação de usuários no backend do projeto ViajeyPlanner, incluindo o modelo de usuário, rotas de registro e login, hashing de senhas e geração de tokens JWT.

**Contexto do Projeto:**

*   Projeto: ViajeyPlanner (aplicação de planejamento de viagens)
*   Backend: Node.js com Express.
*   Banco de Dados: PostgreSQL (usando o cliente `pg`).

**Bibliotecas a Serem Usadas (Instalar se necessário via `npm install`):**

*   `bcryptjs`: Para hashing de senhas.
*   `jsonwebtoken`: Para criar e verificar tokens JWT.

**Instruções Detalhadas para o Replit Agent:**

**1. Instalar Dependências:**
   *   Verifique se `bcryptjs` e `jsonwebtoken` estão no `package.json`. Se não estiverem, adicione-os e execute `npm install`.

**2. Criar Modelo de Usuário (`models/user.js`):**
   *   Crie um novo arquivo `models/user.js`.
   *   Defina uma função `createUser` que receba `username` (ou `email`) e `password`.
       *   Dentro desta função, gere um salt e hasheie a senha usando `bcryptjs` antes de salvá-la no banco de dados.
       *   Insira o novo usuário na tabela `users` (crie esta tabela no seu banco de dados se ainda não existir, com colunas como `id SERIAL PRIMARY KEY`, `username VARCHAR(255) UNIQUE NOT NULL` ou `email VARCHAR(255) UNIQUE NOT NULL`, `password_hash VARCHAR(255) NOT NULL`, `created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP`).
       *   Retorne os dados do usuário criado (sem o hash da senha).
   *   Defina uma função `findUserByUsername` (ou `findUserByEmail`) que busque um usuário pelo seu nome de usuário/email.
       *   Retorne os dados do usuário, incluindo o `password_hash` (necessário para a comparação no login).
   *   Exporte as funções criadas.

**3. Criar Rotas de Autenticação (`routes/authRoutes.js`):**
   *   Crie um novo arquivo `routes/authRoutes.js`.
   *   Use `express.Router()`.
   *   **Rota de Registro (`POST /register`):**
       *   Receba `username` (ou `email`) e `password` do corpo da requisição (`req.body`).
       *   Valide os dados (ex: campos não vazios, formato de email, força da senha - opcional por agora).
       *   Verifique se o usuário já existe usando `findUserByUsername`.
       *   Se não existir, chame `createUser` para salvar o novo usuário.
       *   Responda com sucesso (ex: status 201 e dados do usuário) ou erro.
   *   **Rota de Login (`POST /login`):**
       *   Receba `username` (ou `email`) e `password` do `req.body`.
       *   Use `findUserByUsername` para buscar o usuário.
       *   Se o usuário não for encontrado, retorne erro de autenticação.
       *   Se encontrado, compare a senha fornecida com o `password_hash` armazenado usando `bcryptjs.compare()`.
       *   Se a senha for válida:
           *   Gere um token JWT usando `jsonwebtoken.sign()`. Inclua dados no payload do token (ex: `userId: user.id`, `username: user.username`).
           *   Defina uma chave secreta para o JWT (armazene-a de forma segura, por exemplo, em variáveis de ambiente - `process.env.JWT_SECRET`).
           *   Defina um tempo de expiração para o token (ex: `1h`, `24h`).
           *   Responda com sucesso, enviando o token JWT para o cliente (ex: `{ token: "SEU_TOKEN_JWT_AQUI" }`).
       *   Se a senha for inválida, retorne erro de autenticação.
   *   Exporte o router.

**4. Integrar Rotas de Autenticação no Servidor Principal (`server.js` ou `app.js`):**
   *   Importe o `authRoutes.js`.
   *   Monte as rotas de autenticação sob um prefixo, por exemplo: `app.use("/api/auth", authRoutes);`.

**5. Configurar Variável de Ambiente para JWT_SECRET:**
   *   No Replit, use a ferramenta "Secrets" (variáveis de ambiente) para definir `JWT_SECRET` com um valor longo, aleatório e seguro.
   *   No código (ex: no topo do `authRoutes.js` ou em um arquivo de configuração), acesse-o com `process.env.JWT_SECRET`.

**Considerações Adicionais:**

*   **Tratamento de Erros:** Implemente tratamento de erros robusto em todas as rotas e funções, retornando mensagens de erro claras e status HTTP apropriados.
*   **Validação de Entrada:** Adicione validação para os dados de entrada (ex: `username`, `password`) para garantir que estão no formato esperado.
*   **Estrutura da Tabela `users`:** Certifique-se de que a tabela `users` no seu banco de dados PostgreSQL está criada com as colunas necessárias antes de testar.

**Resultado Esperado Após Esta Parte:**

*   O backend terá endpoints funcionais para `/api/auth/register` e `/api/auth/login`.
*   Novos usuários poderão ser registrados com senhas hasheadas.
*   Usuários existentes poderão fazer login e receber um token JWT válido.

Por favor, Replit Agent, proceda com a criação e modificação dos arquivos necessários no backend para implementar este sistema de autenticação JWT.
